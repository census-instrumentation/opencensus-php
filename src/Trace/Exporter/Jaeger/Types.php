<?php
namespace Jaeger\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TagType {
  const STRING = 0;
  const DOUBLE = 1;
  const BOOL = 2;
  const LONG = 3;
  const BINARY = 4;
  static public $__names = array(
    0 => 'STRING',
    1 => 'DOUBLE',
    2 => 'BOOL',
    3 => 'LONG',
    4 => 'BINARY',
  );
}

final class SpanRefType {
  const CHILD_OF = 0;
  const FOLLOWS_FROM = 1;
  static public $__names = array(
    0 => 'CHILD_OF',
    1 => 'FOLLOWS_FROM',
  );
}

class Tag {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'key',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'vType',
      'isRequired' => true,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'vStr',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'vDouble',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    5 => array(
      'var' => 'vBool',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    6 => array(
      'var' => 'vLong',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    7 => array(
      'var' => 'vBinary',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $vType = null;
  /**
   * @var string
   */
  public $vStr = null;
  /**
   * @var double
   */
  public $vDouble = null;
  /**
   * @var bool
   */
  public $vBool = null;
  /**
   * @var int
   */
  public $vLong = null;
  /**
   * @var string
   */
  public $vBinary = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['vType'])) {
        $this->vType = $vals['vType'];
      }
      if (isset($vals['vStr'])) {
        $this->vStr = $vals['vStr'];
      }
      if (isset($vals['vDouble'])) {
        $this->vDouble = $vals['vDouble'];
      }
      if (isset($vals['vBool'])) {
        $this->vBool = $vals['vBool'];
      }
      if (isset($vals['vLong'])) {
        $this->vLong = $vals['vLong'];
      }
      if (isset($vals['vBinary'])) {
        $this->vBinary = $vals['vBinary'];
      }
    }
  }

  public function getName() {
    return 'Tag';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->vDouble);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->vBool);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->vLong);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vBinary);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tag');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vType !== null) {
      $xfer += $output->writeFieldBegin('vType', TType::I32, 2);
      $xfer += $output->writeI32($this->vType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vStr !== null) {
      $xfer += $output->writeFieldBegin('vStr', TType::STRING, 3);
      $xfer += $output->writeString($this->vStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vDouble !== null) {
      $xfer += $output->writeFieldBegin('vDouble', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->vDouble);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vBool !== null) {
      $xfer += $output->writeFieldBegin('vBool', TType::BOOL, 5);
      $xfer += $output->writeBool($this->vBool);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vLong !== null) {
      $xfer += $output->writeFieldBegin('vLong', TType::I64, 6);
      $xfer += $output->writeI64($this->vLong);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vBinary !== null) {
      $xfer += $output->writeFieldBegin('vBinary', TType::STRING, 7);
      $xfer += $output->writeString($this->vBinary);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Log {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'timestamp',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'fields',
      'isRequired' => true,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Jaeger\Thrift\Tag',
        ),
      ),
    );

  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \Jaeger\Thrift\Tag[]
   */
  public $fields = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['fields'])) {
        $this->fields = $vals['fields'];
      }
    }
  }

  public function getName() {
    return 'Log';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->fields = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Jaeger\Thrift\Tag();
              $xfer += $elem5->read($input);
              $this->fields []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Log');
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 1);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fields !== null) {
      if (!is_array($this->fields)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fields', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->fields));
        {
          foreach ($this->fields as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpanRef {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'refType',
      'isRequired' => true,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'traceIdLow',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'traceIdHigh',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'spanId',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $refType = null;
  /**
   * @var int
   */
  public $traceIdLow = null;
  /**
   * @var int
   */
  public $traceIdHigh = null;
  /**
   * @var int
   */
  public $spanId = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['refType'])) {
        $this->refType = $vals['refType'];
      }
      if (isset($vals['traceIdLow'])) {
        $this->traceIdLow = $vals['traceIdLow'];
      }
      if (isset($vals['traceIdHigh'])) {
        $this->traceIdHigh = $vals['traceIdHigh'];
      }
      if (isset($vals['spanId'])) {
        $this->spanId = $vals['spanId'];
      }
    }
  }

  public function getName() {
    return 'SpanRef';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->traceIdLow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->traceIdHigh);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spanId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpanRef');
    if ($this->refType !== null) {
      $xfer += $output->writeFieldBegin('refType', TType::I32, 1);
      $xfer += $output->writeI32($this->refType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->traceIdLow !== null) {
      $xfer += $output->writeFieldBegin('traceIdLow', TType::I64, 2);
      $xfer += $output->writeI64($this->traceIdLow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->traceIdHigh !== null) {
      $xfer += $output->writeFieldBegin('traceIdHigh', TType::I64, 3);
      $xfer += $output->writeI64($this->traceIdHigh);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spanId !== null) {
      $xfer += $output->writeFieldBegin('spanId', TType::I64, 4);
      $xfer += $output->writeI64($this->spanId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Span {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'traceIdLow',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'traceIdHigh',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'spanId',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    4 => array(
      'var' => 'parentSpanId',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    5 => array(
      'var' => 'operationName',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'references',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Jaeger\Thrift\SpanRef',
        ),
      ),
    7 => array(
      'var' => 'flags',
      'isRequired' => true,
      'type' => TType::I32,
      ),
    8 => array(
      'var' => 'startTime',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    9 => array(
      'var' => 'duration',
      'isRequired' => true,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'tags',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Jaeger\Thrift\Tag',
        ),
      ),
    11 => array(
      'var' => 'logs',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Jaeger\Thrift\Log',
        ),
      ),
    );

  /**
   * @var int
   */
  public $traceIdLow = null;
  /**
   * @var int
   */
  public $traceIdHigh = null;
  /**
   * @var int
   */
  public $spanId = null;
  /**
   * @var int
   */
  public $parentSpanId = null;
  /**
   * @var string
   */
  public $operationName = null;
  /**
   * @var \Jaeger\Thrift\SpanRef[]
   */
  public $references = null;
  /**
   * @var int
   */
  public $flags = null;
  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var int
   */
  public $duration = null;
  /**
   * @var \Jaeger\Thrift\Tag[]
   */
  public $tags = null;
  /**
   * @var \Jaeger\Thrift\Log[]
   */
  public $logs = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['traceIdLow'])) {
        $this->traceIdLow = $vals['traceIdLow'];
      }
      if (isset($vals['traceIdHigh'])) {
        $this->traceIdHigh = $vals['traceIdHigh'];
      }
      if (isset($vals['spanId'])) {
        $this->spanId = $vals['spanId'];
      }
      if (isset($vals['parentSpanId'])) {
        $this->parentSpanId = $vals['parentSpanId'];
      }
      if (isset($vals['operationName'])) {
        $this->operationName = $vals['operationName'];
      }
      if (isset($vals['references'])) {
        $this->references = $vals['references'];
      }
      if (isset($vals['flags'])) {
        $this->flags = $vals['flags'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['logs'])) {
        $this->logs = $vals['logs'];
      }
    }
  }

  public function getName() {
    return 'Span';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->traceIdLow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->traceIdHigh);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spanId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->parentSpanId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operationName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->references = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Jaeger\Thrift\SpanRef();
              $xfer += $elem12->read($input);
              $this->references []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flags);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->tags = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \Jaeger\Thrift\Tag();
              $xfer += $elem18->read($input);
              $this->tags []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->logs = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $elem24 = new \Jaeger\Thrift\Log();
              $xfer += $elem24->read($input);
              $this->logs []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Span');
    if ($this->traceIdLow !== null) {
      $xfer += $output->writeFieldBegin('traceIdLow', TType::I64, 1);
      $xfer += $output->writeI64($this->traceIdLow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->traceIdHigh !== null) {
      $xfer += $output->writeFieldBegin('traceIdHigh', TType::I64, 2);
      $xfer += $output->writeI64($this->traceIdHigh);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spanId !== null) {
      $xfer += $output->writeFieldBegin('spanId', TType::I64, 3);
      $xfer += $output->writeI64($this->spanId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parentSpanId !== null) {
      $xfer += $output->writeFieldBegin('parentSpanId', TType::I64, 4);
      $xfer += $output->writeI64($this->parentSpanId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operationName !== null) {
      $xfer += $output->writeFieldBegin('operationName', TType::STRING, 5);
      $xfer += $output->writeString($this->operationName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->references !== null) {
      if (!is_array($this->references)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('references', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->references));
        {
          foreach ($this->references as $iter25)
          {
            $xfer += $iter25->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flags !== null) {
      $xfer += $output->writeFieldBegin('flags', TType::I32, 7);
      $xfer += $output->writeI32($this->flags);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 8);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I64, 9);
      $xfer += $output->writeI64($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tags', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tags));
        {
          foreach ($this->tags as $iter26)
          {
            $xfer += $iter26->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logs !== null) {
      if (!is_array($this->logs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('logs', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->logs));
        {
          foreach ($this->logs as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Process {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'serviceName',
      'isRequired' => true,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'tags',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Jaeger\Thrift\Tag',
        ),
      ),
    );

  /**
   * @var string
   */
  public $serviceName = null;
  /**
   * @var \Jaeger\Thrift\Tag[]
   */
  public $tags = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['serviceName'])) {
        $this->serviceName = $vals['serviceName'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
    }
  }

  public function getName() {
    return 'Process';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->tags = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Jaeger\Thrift\Tag();
              $xfer += $elem33->read($input);
              $this->tags []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Process');
    if ($this->serviceName !== null) {
      $xfer += $output->writeFieldBegin('serviceName', TType::STRING, 1);
      $xfer += $output->writeString($this->serviceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tags', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tags));
        {
          foreach ($this->tags as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Batch {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'process',
      'isRequired' => true,
      'type' => TType::STRUCT,
      'class' => '\Jaeger\Thrift\Process',
      ),
    2 => array(
      'var' => 'spans',
      'isRequired' => true,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Jaeger\Thrift\Span',
        ),
      ),
    );

  /**
   * @var \Jaeger\Thrift\Process
   */
  public $process = null;
  /**
   * @var \Jaeger\Thrift\Span[]
   */
  public $spans = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['process'])) {
        $this->process = $vals['process'];
      }
      if (isset($vals['spans'])) {
        $this->spans = $vals['spans'];
      }
    }
  }

  public function getName() {
    return 'Batch';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->process = new \Jaeger\Thrift\Process();
            $xfer += $this->process->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->spans = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Jaeger\Thrift\Span();
              $xfer += $elem40->read($input);
              $this->spans []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Batch');
    if ($this->process !== null) {
      if (!is_object($this->process)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('process', TType::STRUCT, 1);
      $xfer += $this->process->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spans !== null) {
      if (!is_array($this->spans)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spans', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->spans));
        {
          foreach ($this->spans as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchSubmitResponse {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ok',
      'isRequired' => true,
      'type' => TType::BOOL,
      ),
    );

  /**
   * @var bool
   */
  public $ok = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ok'])) {
        $this->ok = $vals['ok'];
      }
    }
  }

  public function getName() {
    return 'BatchSubmitResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ok);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchSubmitResponse');
    if ($this->ok !== null) {
      $xfer += $output->writeFieldBegin('ok', TType::BOOL, 1);
      $xfer += $output->writeBool($this->ok);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


