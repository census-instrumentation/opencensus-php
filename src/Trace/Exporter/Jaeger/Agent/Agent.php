<?php
namespace Jaeger\Thrift\Agent;
/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface AgentIf {
  /**
   * @param \Jaeger\Thrift\Agent\Zipkin\Span[] $spans
   */
  public function emitZipkinBatch(array $spans);
  /**
   * @param \Jaeger\Thrift\Batch $batch
   */
  public function emitBatch(\Jaeger\Thrift\Batch $batch);
}


class AgentClient implements \Jaeger\Thrift\Agent\AgentIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function emitZipkinBatch(array $spans)
  {
    $this->send_emitZipkinBatch($spans);
  }

  public function send_emitZipkinBatch(array $spans)
  {
    $args = new \Jaeger\Thrift\Agent\Agent_emitZipkinBatch_args();
    $args->spans = $spans;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emitZipkinBatch', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emitZipkinBatch', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function emitBatch(\Jaeger\Thrift\Batch $batch)
  {
    $this->send_emitBatch($batch);
  }

  public function send_emitBatch(\Jaeger\Thrift\Batch $batch)
  {
    $args = new \Jaeger\Thrift\Agent\Agent_emitBatch_args();
    $args->batch = $batch;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emitBatch', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emitBatch', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}


// HELPER FUNCTIONS AND STRUCTURES

class Agent_emitZipkinBatch_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'spans',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Jaeger\Thrift\Agent\Zipkin\Span',
        ),
      ),
    );

  /**
   * @var \Jaeger\Thrift\Agent\Zipkin\Span[]
   */
  public $spans = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['spans'])) {
        $this->spans = $vals['spans'];
      }
    }
  }

  public function getName() {
    return 'Agent_emitZipkinBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->spans = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Jaeger\Thrift\Agent\Zipkin\Span();
              $xfer += $elem5->read($input);
              $this->spans []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Agent_emitZipkinBatch_args');
    if ($this->spans !== null) {
      if (!is_array($this->spans)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spans', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->spans));
        {
          foreach ($this->spans as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Agent_emitBatch_args {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'batch',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Jaeger\Thrift\Batch',
      ),
    );

  /**
   * @var \Jaeger\Thrift\Batch
   */
  public $batch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['batch'])) {
        $this->batch = $vals['batch'];
      }
    }
  }

  public function getName() {
    return 'Agent_emitBatch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->batch = new \Jaeger\Thrift\Batch();
            $xfer += $this->batch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Agent_emitBatch_args');
    if ($this->batch !== null) {
      if (!is_object($this->batch)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batch', TType::STRUCT, 1);
      $xfer += $this->batch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


